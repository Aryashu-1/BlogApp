{"ast":null,"code":"import { createSlice, createAsyncThunk, isPending } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n//making http requests using redux-thunk middleware\nexport const userAuthorLoginThunk = createAsyncThunk(\"user-author-login\", async (userCred, thunkApi) => {\n  try {\n    if (userCred.userType === \"User\") {\n      let res;\n      res = await axios.post(\"https://localhost:4000/user-api/login\", userCred);\n      if (res.data.message === \"Login Succesfull\") {\n        //store token in local storage\n        localStorage.setItem(\"token\", res.data.token);\n        //return data\n      } else {\n        thunkApi.rejectWithValue(res.data.message);\n      }\n      return res.data;\n    }\n    if (userCred.userType === \"Author\") {\n      const res = await axios.post(\"https://localhost:4000/author-api/login\", userCred);\n      if (res.data.message === \"Login Succesfull\") {\n        //store token in local storage\n        localStorage.setItem(\"token\", res.data.token);\n        //return data\n      } else {\n        thunkApi.rejectWithValue(res.data.message);\n      }\n      return res.data;\n    }\n  } catch (err) {\n    return thunkApi.rejectWithValue(err);\n  }\n});\nconst userauthorslice = createSlice({\n  name: \"user-author-login\",\n  initialState: {\n    \"isPending\": false,\n    \"loginUserStatus\": false,\n    \"currentUser\": {},\n    \"errOccurred\": false,\n    \"errMsg\": ''\n  },\n  reducers: {\n    resetState: (state, action) => {\n      state.isPending = false;\n      state.currentUser = {};\n      state.loginUserStatus = false;\n      state.errMsg = '';\n      state.errOccurred = false;\n    }\n  },\n  extraReducers: builder => builder.addCase(userAuthorLoginThunk.pending, (state, action) => {\n    state.isPending = true;\n  }).addCase(userAuthorLoginThunk.fulfilled, (state, action) => {\n    state.isPending = false;\n    state.currentUser = action.payload.user;\n    state.loginUserStatus = true;\n    state.errMsg = '';\n    state.errOccurred = false;\n  }).addCase(userAuthorLoginThunk.rejected, (state, action) => {\n    state.isPending = false;\n    state.currentUser = {};\n    state.loginUserStatus = false;\n    state.errMsg = action.payload;\n    state.errOccurred = true;\n  })\n});\n\n//export action creatorfunctions\nexport const {\n  resetState\n} = userauthorslice.actions;\n//export root reducer f this slice\nexport default userauthorslice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","isPending","axios","userAuthorLoginThunk","userCred","thunkApi","userType","res","post","data","message","localStorage","setItem","token","rejectWithValue","err","userauthorslice","name","initialState","reducers","resetState","state","action","currentUser","loginUserStatus","errMsg","errOccurred","extraReducers","builder","addCase","pending","fulfilled","payload","user","rejected","actions","reducer"],"sources":["C:/Users/DELL/Desktop/Blog/Client/blog/src/redux/slices/userauthorslice.js"],"sourcesContent":["import { createSlice,createAsyncThunk, isPending } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n//making http requests using redux-thunk middleware\r\nexport const userAuthorLoginThunk = createAsyncThunk(\"user-author-login\",async(userCred,thunkApi )=>{\r\n    try {\r\n    if(userCred.userType === \"User\"){\r\n     let res;\r\n \r\n     res = await axios.post(\"https://localhost:4000/user-api/login\", userCred);\r\n \r\n       if( res.data.message === \"Login Succesfull\"){\r\n             //store token in local storage\r\n             localStorage.setItem(\"token\",res.data.token)\r\n             //return data\r\n             \r\n       }\r\n       else{\r\n            thunkApi.rejectWithValue(res.data.message)\r\n       }\r\n       return res.data\r\n    }\r\n    if(userCred.userType === \"Author\"){\r\n        \r\n            const res = await axios.post(\"https://localhost:4000/author-api/login\",userCred)\r\n        if( res.data.message === \"Login Succesfull\"){\r\n            //store token in local storage\r\n            localStorage.setItem(\"token\",res.data.token)\r\n            //return data\r\n\r\n        }\r\n        else{\r\n             thunkApi.rejectWithValue(res.data.message)\r\n        }\r\n        return res.data\r\n    }\r\n}catch(err){\r\n    return thunkApi.rejectWithValue(err)\r\n}})\r\n\r\n\r\nconst userauthorslice = createSlice({\r\n    name:\"user-author-login\",\r\n    initialState:{\r\n        \"isPending\" : false,\r\n        \"loginUserStatus\": false,\r\n        \"currentUser\":{},\r\n        \"errOccurred\":false,\r\n        \"errMsg\":'',\r\n    },\r\n    reducers:{\r\n            resetState: (state,action)=>{\r\n                state.isPending = false;\r\n                state.currentUser ={};\r\n                state.loginUserStatus = false;\r\n                state.errMsg='';\r\n                state.errOccurred = false;    \r\n\r\n            }\r\n    },\r\n    extraReducers: builder => builder\r\n    .addCase(userAuthorLoginThunk.pending,(state,action)=>{\r\n        state.isPending = true;\r\n    })\r\n    .addCase(userAuthorLoginThunk.fulfilled,(state,action)=>{\r\n        state.isPending = false;\r\n        state.currentUser = action.payload.user;\r\n        state.loginUserStatus = true;\r\n        state.errMsg='';\r\n        state.errOccurred=false;\r\n    })\r\n    .addCase(userAuthorLoginThunk.rejected,(state,action)=>{\r\n        state.isPending = false;\r\n        state.currentUser = {};\r\n        state.loginUserStatus = false;\r\n        state.errMsg=action.payload;\r\n        state.errOccurred=true;\r\n    }),\r\n})\r\n\r\n//export action creatorfunctions\r\nexport const {resetState}= userauthorslice.actions\r\n//export root reducer f this slice\r\nexport default userauthorslice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}